template <>
struct fmt::formatter<{{ namespaces | join('::') }}::{{ name }}> {
  template <typename Context>
  constexpr auto parse(Context &ctx) {
    return std::begin(ctx);
  }
  template <typename Context>
  auto format(
      const {{ namespaces | join('::') }}::{{ name }}& value,
      Context& ctx) {
    using namespace std::literals;
    return fmt::format_to(
        ctx.out(),
{%- if variables | length == 0 %}
{%- raw %}
        R"({{}})"sv);
{%- endraw %}
{%- else %}
{%- raw %}
        R"({{)"
{%- endraw %}
{%- for variable in variables %}
        R"({{ variable.name }}={{ variable.format_string }}{{ ', ' if not loop.last }})"
{%- endfor %}
{%- raw %}
        R"(}})"sv,
{%- endraw %}
{%- for variable in variables %}
        {{ variable.format_value }}{{ ',' if not loop.last else ');' }}
{%- endfor %}
{%- endif %}
  }
};
