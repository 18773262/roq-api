/* Copyright (c) 2017-2018, Hans Erik Thrane */

#pragma once

#include <quinclas/tradingapi_generated.h>

#include <chrono>
#include <ostream>
#include <utility>

// Version
#define QUINCLAS_VERSION "@PACKAGE_VERSION@"

namespace quinclas {
namespace common {

/**
 * Constants.
 */
const size_t MAX_DEPTH = 10;                               ///< Maximum market-by-price depth

/**
 * Typedefs.
 */
typedef std::chrono::microseconds duration_t;
typedef std::chrono::time_point<std::chrono::system_clock, duration_t> time_point_t;
typedef std::pair<const void *, size_t> buffer_t;
typedef std::pair<buffer_t, buffer_t> message_t;

/**
 * Order book layer (positional by-price aggregated view of an order book).
 */
struct Layer {
  double bid_price;                                        ///< Bid price
  double bid_quantity;                                     ///< Aggregated bid quantity
  double ask_price;                                        ///< Ask price
  double ask_quantity;                                     ///< Aggregated ask quantity
};

/**
 * Handshake ack.
 */

struct HandshakeAck {
  const char *api_version;                                 ///< API version.
  bool failure;                                            ///< Failure?
  const char *reason;                                      ///< Reason (if failure)
};

/**
 * Heatbeat ack.
 */

struct HeartbeatAck {
  time_point_t opaque;                                     ///< Timestamp.
};

/**
 * Timer.
 */

struct Timer {
  time_point_t utc_time;                                   ///< Timestamp.
};

/**
 * Gateway status.
 */
struct GatewayStatus {
  ConnectionStatus market_data_connection_status;          ///< Connection status to market data infrastructure
  LoginStatus market_data_login_status;                    ///< Login status with market data infrastructure
  ConnectionStatus order_management_connection_status;     ///< Connection status to order management infrastructure
  LoginStatus order_management_login_status;               ///< Login status with order management infrastructure
};

/**
 * Market depth (aggregated view of an order book).
 */
struct MarketByPrice {
  const char *exchange;                                    ///< Exchange name
  const char *instrument;                                  ///< Instrument name
  Layer depth[MAX_DEPTH];                                  ///< Layers
};

/**
 * Trade summary.
 */
struct TradeSummary {
  const char *exchange;                                    ///< Exchange name
  const char *instrument;                                  ///< Instrument name
  double price;                                            ///< Price
  double volume;                                           ///< Volume
  double turnover;                                         ///< Turnover
  TradeDirection direction;                                ///< Direction
};

/**
 * Reference data.
 */
struct ReferenceData {
  const char *exchange;                                    ///< Exchange name
  const char *instrument;                                  ///< Instrument name
  double tick_size;                                        ///< Tick size (price increments)
  double limit_up;                                         ///< Price limit-up
  double limit_down;                                       ///< Price limit-down
};

/**
 * Market status.
 */
struct MarketStatus {
  const char *exchange;                                    ///< Exchange name
  const char *instrument;                                  ///< Instrument name
  TradingStatus trading_status;                            ///< Market status
};

/**
 * Response to create order
 */
struct CreateOrderAck {
  uint32_t opaque;                                         ///< User provided opaque value
  uint32_t order_id;                                       ///< Order id (as known by the gateway).
  bool failure;                                            ///< Failure?
  const char *reason;                                      ///< Reason (if failure).
  // following fields may or may not be populated
  const char *order_template;                              ///< Order template
  const char *external_order_id;                           ///< External order id.
  const char *exchange;                                    ///< Exchange name
  const char *instrument;                                  ///< Instrument name
};

/**
 * Response to modify order
 */
struct ModifyOrderAck {
  uint32_t opaque;                                         ///< User provided opaque value
  uint32_t order_id;                                       ///< Order id (as known by the gateway).
  bool failure;                                            ///< Failure?
  const char *reason;                                      ///< Reason (if failure).
  // following fields may or may not be populated
  const char *order_template;                              ///< Order template
  const char *external_order_id;                           ///< External order id.
  const char *exchange;                                    ///< Exchange name
  const char *instrument;                                  ///< Instrument name
  double quantity_change;                                  ///< Quantity change.
  double limit_price;                                      ///< Limit price.
};

/**
 * Response to cancel order
 */
struct CancelOrderAck {
  uint32_t opaque;                                         ///< User provided opaque value
  uint32_t order_id;                                       ///< Order id (as known by the gateway).
  bool failure;                                            ///< Failure?
  const char *reason;                                      ///< Reason (if failure).
  // following fields may or may not be populated
  const char *order_template;                              ///< Order template
  const char *external_order_id;                           ///< External order id.
  const char *exchange;                                    ///< Exchange name
  const char *instrument;                                  ///< Instrument name
};

/**
 * Order update.
 */
struct OrderUpdate {
  uint32_t opaque;                                         ///< User provided opaque value
  uint32_t order_id;                                       ///< Order id (as known by the gateway).
  const char *order_template;                              ///< Order template
  const char *external_order_id;                           ///< External order id.
  const char *exchange;                                    ///< Exchange name
  const char *instrument;                                  ///< Instrument name
  OrderStatus status;                                      ///< Order status
  TradeDirection trade_direction;                          ///< Trade direction
  double remaining_quantity;                               ///< Remaining (unfilled) quantity
  double traded_quantity;                                  ///< Traded (filled) quantity
  time_point_t insert_time;                                ///< Order insertion time
  time_point_t cancel_time;                                ///< Order cancellation time
};

/**
 * Trade update.
 */
struct TradeUpdate {
  uint32_t order_id;                                       ///< Order id (as known by the gateway).
  const char *external_order_id;                           ///< External order id.
  const char *external_trade_id;                           ///< External rade identifier
  const char *exchange;                                    ///< Exchange name
  const char *instrument;                                  ///< Instrument name
  TradeDirection trade_direction;                          ///< Trade direction
  double quantity;                                         ///< Trade quantity
  double price;                                            ///< Trade price
  time_point_t trade_time;                                 ///< Trade time
};

/**
 * Termination event. EXPERIMENTAL
 */
struct TerminationEvent {
  const char *gateway;                                     ///< Gateway name
};

/**
 * MessageInfo.
 */
struct MessageInfo {
  const char *gateway;                                     ///< Gateway name
  uint64_t message_id;                                     ///< Message identifier
  time_point_t exchange_time;                              ///< Exchange timestamp
  time_point_t receive_time;                               ///< Receive timestamp
  time_point_t enqueue_time;                               ///< Enqueue timestamp
};

/**
 * Timer event.
 */
struct TimerEvent {
  const MessageInfo& message_info;                         ///< Message info
};

/**
 * Idle event.
 */
struct IdleEvent {};

/**
 * Handshake ack event.
 */
struct HandshakeAckEvent {
  const MessageInfo& message_info;                         ///< Message info
  const HandshakeAck& handshake_ack;                       ///< Handshake ack
};

/**
 * Heartbeat ack event.
 */
struct HeartbeatAckEvent {
  const MessageInfo& message_info;                         ///< Message info
  const HeartbeatAck& heartbeat_ack;                       ///< Heartbeat ack
};

/**
 * Gateway status update event.
 */
struct GatewayStatusEvent {
  const MessageInfo& message_info;                         ///< Message info
  const GatewayStatus& gateway_status;                     ///< Gateway status update
};

/**
 * Reference data update event.
 */
struct ReferenceDataEvent {
  const MessageInfo& message_info;                         ///< Message info
  const ReferenceData& reference_data;                     ///< Reference data update
};

/**
 * Market status update event.
 */
struct MarketStatusEvent {
  const MessageInfo& message_info;                         ///< Message info
  const MarketStatus& market_status;                       ///< Market status update
};

/**
 * Market depth update event.
 */
struct MarketByPriceEvent {
  const MessageInfo& message_info;                         ///< Message info
  const MarketByPrice& market_by_price;                    ///< Market-by-price update
};

/**
 * Trade summary update event.
 */
struct TradeSummaryEvent {
  const MessageInfo& message_info;                         ///< Message info
  const TradeSummary& trade_summary;                       ///< Trade summary update
};

/**
 * Create order ack event.
 */
struct CreateOrderAckEvent {
  const MessageInfo& message_info;                         ///< Message info
  const CreateOrderAck& create_order_ack;                  ///< Create order ack
};

/**
 * Modify order ack event.
 */
struct ModifyOrderAckEvent {
  const MessageInfo& message_info;                         ///< Message info
  const ModifyOrderAck& modify_order_ack;                  ///< Modify order ack
};

/**
 * Cancel order ack event.
 */
struct CancelOrderAckEvent {
  const MessageInfo& message_info;                         ///< Message info
  const CancelOrderAck& cancel_order_ack;                  ///< Cancel order ack
};

/**
 * Order update event.
 */
struct OrderUpdateEvent {
  const MessageInfo& message_info;                         ///< Message info
  const OrderUpdate& order_update;                         ///< Order update
};

/**
 * Trade update event.
 */
struct TradeUpdateEvent {
  const MessageInfo& message_info;                         ///< Message info
  const TradeUpdate& trade_update;                         ///< Trade update
};

/**
 * Handshake.
 */

struct Handshake {
  const char *api_version;                                 ///< API version.
  const char *login;                                       ///< Login.
  const char *password;                                    ///< Password.
};

/**
 * Heatbeat.
 */

struct Heartbeat {
  time_point_t opaque;                                     ///< Timestamp.
};

/**
 * Create order.
 */
struct CreateOrder {
  const uint32_t opaque;                                   ///< Opaque (user) value
  const char *order_template;                              ///< Order template name
  const char *exchange;                                    ///< Exchange name
  const char *instrument;                                  ///< Instrument name
  const TradeDirection direction;                          ///< Trade direction
  const double quantity;                                   ///< Desired quantity
  const double limit_price;                                ///< Limit price
  const double stop_price;                                 ///< Stop price
};

/**
 * Modify order.
 */
struct ModifyOrder {
  uint32_t order_id;                                       ///< Order id (as known by the gateway).
  const double quantity_change;                            ///< Desired quantity change
  const double limit_price;                                ///< Limit price
};

/**
 * Cancel order.
 */
struct CancelOrder {
  uint32_t order_id;                                       ///< Order id (as known by the gateway).
};

/**
 * RequestInfo.
 */
struct RequestInfo {
  const char *destination;                                 ///< Destination name, typically a gateway
  const char *trace_source;                                ///< Triggering source
  uint64_t trace_message_id;                               ///< Triggering message id
  time_point_t send_time;                                  ///< Request time
  time_point_t receive_time;                               ///< Receive timestamp
};

/*
 * Handshake request.
 */

struct HandshakeRequest {
  const RequestInfo& request_info;                         ///< Routing information
  const Handshake& handshake;                              ///< Handshake details
};

/*
 * Heartbeat request.
 */

struct HeartbeatRequest {
  const RequestInfo& request_info;                         ///< Routing information
  const Heartbeat& heartbeat;                              ///< Heartbeat details
};

/*
 * Create order request.
 */

struct CreateOrderRequest {
  const RequestInfo& request_info;                         ///< Routing information
  const CreateOrder& create_order;                         ///< Create order details
};

/*
 * Modify order request.
 */

struct ModifyOrderRequest {
  const RequestInfo& request_info;                         ///< Routing information
  const ModifyOrder& modify_order;                         ///< Modify order details
};

/*
 * Cancel order request.
 */

struct CancelOrderRequest {
  const RequestInfo& request_info;                         ///< Routing information
  const CancelOrder& cancel_order;                         ///< Cancel order details
};

/**
 * Server interface.
 */

class Server {
 public:
  virtual void on(const HandshakeRequest&) = 0;            ///< Handshake request handler.
  virtual void on(const HeartbeatRequest&) = 0;            ///< Heartbeat request handler.
};

/**
 * Gateway interface.
 */
class Gateway {
 public:
   /**
    * Dispatcher interface.
    */
  class Dispatcher {
   public:
    virtual void send(const message_t& message) = 0;       ///< Send mesage.
  };
  virtual ~Gateway() = default;
  /**
   * Start the event loop.
   */
  virtual void start() = 0;
  /**
   * Stop the event loop.
   */
  virtual void stop() = 0;
  /**
   * Get metrics.
   *
   * @param ostream output stream.
   * @param format output format.
   */
  virtual void get_metrics(std::ostream& ostream, const char *format) = 0;
  // TODO(thraneh): client connect & disconnet
  /**
   * CreateOrder request.
   *
   * @param create_order_request has the order creation request details.
   */
  virtual void on(const CreateOrderRequest& create_order_request) = 0;
  /**
   * ModifyOrder request.
   *
   * @param modify_order_request has the order modification request details.
   */
  virtual void on(const ModifyOrderRequest& modify_order_request) = 0;
  /**
   * CancelOrder request.
   *
   * @param cancel_order_request has the order cancellation request details.
   */
  virtual void on(const CancelOrderRequest& cancel_order_request) = 0;
};

/**
 * Client interface.
 */

class Client {
 public:
  virtual void on(const HandshakeAckEvent&) = 0;           ///< Handshake ack event handler.
  virtual void on(const HeartbeatAckEvent&) = 0;           ///< Heartbeat ack event handler.
};

/**
 * Strategy interface.
 */
class Strategy {
 public:
   /*
    * Dispatcher interface.
    */
  class Dispatcher {
   public:
    /**
     * Send CreateOrder request.
     *
     * @param gateway name of the destination gateway.
     * @param create_order has the order creation details.
     */
    virtual void send(const char *gateway, const CreateOrder& create_order) = 0;
    /**
     * Send ModifyOrder request.
     *
     * @param gateway name of the destination gateway.
     * @param modify_order has the order modification details.
     */
    virtual void send(const char *gateway, const ModifyOrder& modify_order) = 0;
    /**
     * Send CancelOrder request.
     *
     * @param gateway name of the destination gateway.
     * @param cancel_order has the order cancellation details.
     */
    virtual void send(const char *gateway, const CancelOrder& cancel_order) = 0;
  };
  virtual ~Strategy() = default;
  virtual void on(const TimerEvent&) = 0;                  ///< Timer (don't rely on the accuracy!)
  virtual void on(const IdleEvent&) = 0;                   ///< Idle
  virtual void on(const GatewayStatusEvent&) = 0;          ///< Connection or login status has changed for a gateway
  virtual void on(const ReferenceDataEvent&) = 0;          ///< Reference data update for an instrument
  virtual void on(const MarketStatusEvent&) = 0;           ///< Market status update for an instrument
  virtual void on(const MarketByPriceEvent&) = 0;          ///< Market-by-price update for an instrument
  virtual void on(const TradeSummaryEvent&) = 0;           ///< Trade summary update for an instrument
  virtual void on(const CreateOrderAckEvent&) = 0;         ///< Response to a create order request
  virtual void on(const ModifyOrderAckEvent&) = 0;         ///< Response to a modify order request
  virtual void on(const CancelOrderAckEvent&) = 0;         ///< Response to a cancel order request
  virtual void on(const OrderUpdateEvent&) = 0;            ///< New order, or order details have been updated
  virtual void on(const TradeUpdateEvent&) = 0;            ///< New trade, or trade details have been updated
};

// Number
struct Number {
  explicit Number(double value) : _value(value) {}
  const double _value;
};

// Stream
std::ostream& operator<<(std::ostream& stream, const Number number);
std::ostream& operator<<(std::ostream& stream, const ConnectionStatus value);
std::ostream& operator<<(std::ostream& stream, const LoginStatus value);
std::ostream& operator<<(std::ostream& stream, const TradeDirection value);
std::ostream& operator<<(std::ostream& stream, const TradingStatus value);
std::ostream& operator<<(std::ostream& stream, const OrderStatus value);
std::ostream& operator<<(std::ostream& stream, time_point_t time_point);
std::ostream& operator<<(std::ostream& stream, const Layer& value);
std::ostream& operator<<(std::ostream& stream, const GatewayStatus& value);
std::ostream& operator<<(std::ostream& stream, const ReferenceData& value);
std::ostream& operator<<(std::ostream& stream, const MarketStatus& value);
std::ostream& operator<<(std::ostream& stream, const MarketByPrice& value);
std::ostream& operator<<(std::ostream& stream, const TradeSummary& value);
std::ostream& operator<<(std::ostream& stream, const OrderUpdate& value);
std::ostream& operator<<(std::ostream& stream, const TradeUpdate& value);
std::ostream& operator<<(std::ostream& stream, const CreateOrderAck& value);
std::ostream& operator<<(std::ostream& stream, const ModifyOrderAck& value);
std::ostream& operator<<(std::ostream& stream, const CancelOrderAck& value);
std::ostream& operator<<(std::ostream& stream, const MessageInfo& value);
std::ostream& operator<<(std::ostream& stream, const GatewayStatusEvent& value);
std::ostream& operator<<(std::ostream& stream, const ReferenceDataEvent& value);
std::ostream& operator<<(std::ostream& stream, const MarketStatusEvent& value);
std::ostream& operator<<(std::ostream& stream, const MarketByPriceEvent& value);
std::ostream& operator<<(std::ostream& stream, const TradeSummaryEvent& value);
std::ostream& operator<<(std::ostream& stream, const OrderUpdateEvent& value);
std::ostream& operator<<(std::ostream& stream, const TradeUpdateEvent& value);
std::ostream& operator<<(std::ostream& stream, const CreateOrderAckEvent& value);
std::ostream& operator<<(std::ostream& stream, const ModifyOrderAckEvent& value);
std::ostream& operator<<(std::ostream& stream, const CancelOrderAckEvent& value);
std::ostream& operator<<(std::ostream& stream, const CreateOrder& value);
std::ostream& operator<<(std::ostream& stream, const ModifyOrder& value);
std::ostream& operator<<(std::ostream& stream, const CancelOrder& value);
std::ostream& operator<<(std::ostream& stream, const RequestInfo& value);
std::ostream& operator<<(std::ostream& stream, const CreateOrderRequest& value);
std::ostream& operator<<(std::ostream& stream, const ModifyOrderRequest& value);
std::ostream& operator<<(std::ostream& stream, const CancelOrderRequest& value);

}  // namespace common
}  // namespace quinclas
