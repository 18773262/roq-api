/* Copyright (c) 2017-2018, Hans Erik Thrane */

#pragma once

#include <cctz/time_zone.h>
#include <quinclas/tradingapi_generated.h>
#include <chrono>
#include <iostream>

// Version
#define QUINCLAS_VERSION "@PACKAGE_VERSION@"

namespace quinclas {
namespace common {

/**
 * Constants.
 */
const size_t MAX_DEPTH = 10;                               ///< Maximum market-by-price depth

/**
 * Typedefs.
 */
typedef std::chrono::microseconds duration_t;
typedef std::chrono::time_point<std::chrono::system_clock, duration_t> time_point_t;

/**
 * Order book layer (positional by-price aggregated view of an order book).
 */
struct Layer {
  double bid_price;                                        ///< Bid price
  double bid_quantity;                                     ///< Aggregated bid quantity
  double ask_price;                                        ///< Ask price
  double ask_quantity;                                     ///< Aggregated ask quantity
};

/**
 * Handshake ack.
 */

struct HandshakeAck {
  const char *api_version;                                 ///< API version.
  bool failure;                                            ///< Failure?
  const char *reason;                                      ///< Reason (if failure)
};

/**
 * Heatbeat ack.
 */

struct HeartbeatAck {
  time_point_t opaque;                                     ///< Timestamp.
};

/**
 * Gateway status.
 */
struct GatewayStatus {
  ConnectionStatus market_data_connection_status;          ///< Connection status to market data infrastructure
  LoginStatus market_data_login_status;                    ///< Login status with market data infrastructure
  ConnectionStatus order_management_connection_status;     ///< Connection status to order management infrastructure
  LoginStatus order_management_login_status;               ///< Login status with order management infrastructure
};

/**
 * Market depth (aggregated view of an order book).
 */
struct MarketByPrice {
  const char *exchange;                                    ///< Exchange name
  const char *instrument;                                  ///< Instrument name
  Layer depth[MAX_DEPTH];                                  ///< Layers
};

/**
 * Session statistics.
 */
struct SessionStatistics {
  const char *exchange;                                    ///< Exchange name
  const char *instrument;                                  ///< Instrument name
  double open;                                             ///< Open price
  double high;                                             ///< Highest traded price
  double low;                                              ///< Lowest traded price
};

/**
 * Daily market statistics.
 */
struct DailyStatistics {
  const char *exchange;                                    ///< Exchange name
  const char *instrument;                                  ///< Instrument name
  double settlement;                                       ///< Settlement price
  double open_interest;                                    ///< Open interest
  double volume;                                           ///< Total volume
};

/**
 * Reference data.
 */
struct ReferenceData {
  const char *exchange;                                    ///< Exchange name
  const char *instrument;                                  ///< Instrument name
  double tick_size;                                        ///< Tick size (price increments)
  double limit_up;                                         ///< Price limit-up
  double limit_down;                                       ///< Price limit-down
};

/**
 * Market status.
 */
struct MarketStatus {
  const char *exchange;                                    ///< Exchange name
  const char *instrument;                                  ///< Instrument name
  TradingStatus trading_status;                            ///< Market status
};

/**
 * Response to create order
 */
struct CreateOrderAck {
  uint32_t opaque;                                         ///< User provided opaque value
  uint32_t order_id;                                       ///< Order id (as known by the gateway).
  bool failure;                                            ///< Failure?
  const char *reason;                                      ///< Reason (if failure).
  // following fields may or may not be populated
  const char *order_template;                              ///< Order template
  const char *external_order_id;                           ///< External order id.
  const char *exchange;                                    ///< Exchange name
  const char *instrument;                                  ///< Instrument name
};

/**
 * Response to modify order
 */
struct ModifyOrderAck {
  uint32_t opaque;                                         ///< User provided opaque value
  uint32_t order_id;                                       ///< Order id (as known by the gateway).
  bool failure;                                            ///< Failure?
  const char *reason;                                      ///< Reason (if failure).
  // following fields may or may not be populated
  const char *order_template;                              ///< Order template
  const char *external_order_id;                           ///< External order id.
  const char *exchange;                                    ///< Exchange name
  const char *instrument;                                  ///< Instrument name
  double quantity_change;                                  ///< Quantity change.
  double limit_price;                                      ///< Limit price.
};

/**
 * Response to cancel order
 */
struct CancelOrderAck {
  uint32_t opaque;                                         ///< User provided opaque value
  uint32_t order_id;                                       ///< Order id (as known by the gateway).
  bool failure;                                            ///< Failure?
  const char *reason;                                      ///< Reason (if failure).
  // following fields may or may not be populated
  const char *order_template;                              ///< Order template
  const char *external_order_id;                           ///< External order id.
  const char *exchange;                                    ///< Exchange name
  const char *instrument;                                  ///< Instrument name
};

/**
 * Order update.
 */
struct OrderUpdate {
  uint32_t opaque;                                         ///< User provided opaque value
  uint32_t order_id;                                       ///< Order id (as known by the gateway).
  const char *order_template;                              ///< Order template
  const char *external_order_id;                           ///< External order id.
  const char *exchange;                                    ///< Exchange name
  const char *instrument;                                  ///< Instrument name
  OrderStatus status;                                      ///< Order status
  TradeDirection trade_direction;                          ///< Trade direction
  double remaining_quantity;                               ///< Remaining (unfilled) quantity
  double traded_quantity;                                  ///< Traded (filled) quantity
  time_point_t insert_time;                                ///< Order insertion time
  time_point_t cancel_time;                                ///< Order cancellation time
};

/**
 * Trade update.
 */
struct TradeUpdate {
  uint32_t order_id;                                       ///< Order id (as known by the gateway).
  const char *external_order_id;                           ///< External order id.
  const char *external_trade_id;                           ///< External rade identifier
  const char *exchange;                                    ///< Exchange name
  const char *instrument;                                  ///< Instrument name
  TradeDirection trade_direction;                          ///< Trade direction
  double quantity;                                         ///< Trade quantity
  double price;                                            ///< Trade price
  time_point_t trade_time;                                 ///< Trade time
};

/**
 * Termination event. EXPERIMENTAL
 */
struct TerminationEvent {
  const char *gateway;                                     ///< Gateway name
};

/**
 * MessageInfo.
 */
struct MessageInfo {
  const char *gateway;                                     ///< Gateway name
  uint64_t message_id;                                     ///< Message identifier
  time_point_t exchange_time;                              ///< Exchange timestamp
  time_point_t receive_time;                               ///< Receive timestamp
  time_point_t enqueue_time;                               ///< Enqueue timestamp
};

/**
 * Timer event.
 */
struct TimerEvent {
  time_point_t current_utc_time;                           // Current time
};

/**
 * Idle event.
 */
struct IdleEvent {};

/**
 * Handshake ack event.
 */
struct HandshakeAckEvent {
  const MessageInfo& message_info;                         ///< Message info
  const HandshakeAck& handshake_ack;                       ///< Handshake ack
};

/**
 * Heartbeat ack event.
 */
struct HeartbeatAckEvent {
  const MessageInfo& message_info;                         ///< Message info
  const HeartbeatAck& heartbeat_ack;                       ///< Heartbeat ack
};

/**
 * Gateway status update event.
 */
struct GatewayStatusEvent {
  const MessageInfo& message_info;                         ///< Message info
  const GatewayStatus& gateway_status;                     ///< Gateway status update
};

/**
 * Reference data update event.
 */
struct ReferenceDataEvent {
  const MessageInfo& message_info;                         ///< Message info
  const ReferenceData& reference_data;                     ///< Reference data update
};

/**
 * Market status update event.
 */
struct MarketStatusEvent {
  const MessageInfo& message_info;                         ///< Message info
  const MarketStatus& market_status;                       ///< Market status update
};

/**
 * Market depth update event.
 */
struct MarketByPriceEvent {
  const MessageInfo& message_info;                         ///< Message info
  const MarketByPrice& market_by_price;                    ///< Market-by-price update
};

/**
 * Session statistics update event.
 */
struct SessionStatisticsEvent {
  const MessageInfo& message_info;                         ///< Message info
  const SessionStatistics& session_statistics;             ///< Session statistics update
};

/**
 * Daily statistics update event.
 */
struct DailyStatisticsEvent {
  const MessageInfo& message_info;                         ///< Message info
  const DailyStatistics& daily_statistics;                 ///< Daily statistics update
};

/**
 * Create order ack event.
 */
struct CreateOrderAckEvent {
  const MessageInfo& message_info;                         ///< Message info
  const CreateOrderAck& create_order_ack;                  ///< Create order ack
};

/**
 * Modify order ack event.
 */
struct ModifyOrderAckEvent {
  const MessageInfo& message_info;                         ///< Message info
  const ModifyOrderAck& modify_order_ack;                  ///< Modify order ack
};

/**
 * Cancel order ack event.
 */
struct CancelOrderAckEvent {
  const MessageInfo& message_info;                         ///< Message info
  const CancelOrderAck& cancel_order_ack;                  ///< Cancel order ack
};

/**
 * Order update event.
 */
struct OrderUpdateEvent {
  const MessageInfo& message_info;                         ///< Message info
  const OrderUpdate& order_update;                         ///< Order update
};

/**
 * Trade update event.
 */
struct TradeUpdateEvent {
  const MessageInfo& message_info;                         ///< Message info
  const TradeUpdate& trade_update;                         ///< Trade update
};

/**
 * Handshake.
 */

struct Handshake {
  const char *api_version;                                 ///< API version.
  const char *login;                                       ///< Login.
  const char *password;                                    ///< Password.
};

/**
 * Heatbeat.
 */

struct Heartbeat {
  time_point_t opaque;                                     ///< Timestamp.
};

/**
 * Create order.
 */
struct CreateOrder {
  const uint32_t opaque;                                   ///< Opaque (user) value
  const char *order_template;                              ///< Order template name
  const char *exchange;                                    ///< Exchange name
  const char *instrument;                                  ///< Instrument name
  const TradeDirection direction;                          ///< Trade direction
  const double quantity;                                   ///< Desired quantity
  const double limit_price;                                ///< Limit price
  const double stop_price;                                 ///< Stop price
};

/**
 * Modify order.
 */
struct ModifyOrder {
  uint32_t order_id;                                       ///< Order id (as known by the gateway).
  const double quantity_change;                            ///< Desired quantity change
  const double limit_price;                                ///< Limit price
};

/**
 * Cancel order.
 */
struct CancelOrder {
  uint32_t order_id;                                       ///< Order id (as known by the gateway).
};

/**
 * RequestInfo.
 */
struct RequestInfo {
  const char *destination;                                 ///< Destination name, typically a gateway
};

/*
 * Handshake request.
 */

struct HandshakeRequest {
  const RequestInfo& request_info;                         ///< Routing information
  const Handshake& handshake;                              ///< Handshake details
};

/*
 * Heartbeat request.
 */

struct HeartbeatRequest {
  const RequestInfo& request_info;                         ///< Routing information
  const Heartbeat& heartbeat;                              ///< Heartbeat details
};

/*
 * Create order request.
 */

struct CreateOrderRequest {
  const RequestInfo& request_info;                         ///< Routing information
  const CreateOrder& create_order;                         ///< Create order details
};

/*
 * Modify order request.
 */

struct ModifyOrderRequest {
  const RequestInfo& request_info;                         ///< Routing information
  const ModifyOrder& modify_order;                         ///< Modify order details
};

/*
 * Cancel order request.
 */

struct CancelOrderRequest {
  const RequestInfo& request_info;                         ///< Routing information
  const CancelOrder& cancel_order;                         ///< Cancel order details
};

/**
 * Server interface.
 */

class Server {
 public:
  virtual void on(const HandshakeRequest&) = 0;            ///< Handshake request handler.
  virtual void on(const HeartbeatRequest&) = 0;            ///< Heartbeat request handler.
};

/**
 * Gateway interface.
 */
class Gateway {
 public:
   /**
    * Dispatcher interface.
    */
  class Dispatcher {
   public:
    virtual void send(const GatewayStatusEvent&) = 0;      ///< Connection or login status has changed for a gateway
    virtual void send(const ReferenceDataEvent&) = 0;      ///< Reference data update for an instrument
    virtual void send(const MarketStatusEvent&) = 0;       ///< Market status update for an instrument
    virtual void send(const MarketByPriceEvent&) = 0;      ///< Market-by-price update for an instrument
    virtual void send(const SessionStatisticsEvent&) = 0;  ///< Session statistics update for an instrument
    virtual void send(const DailyStatisticsEvent&) = 0;    ///< Daily statistics update for an instrument
    virtual void send(const CreateOrderAckEvent&) = 0;     ///< Response to a create order request
    virtual void send(const ModifyOrderAckEvent&) = 0;     ///< Response to a modify order request
    virtual void send(const CancelOrderAckEvent&) = 0;     ///< Response to a cancel order request
    virtual void send(const OrderUpdateEvent&) = 0;        ///< New order, or order details have been updated
    virtual void send(const TradeUpdateEvent&) = 0;        ///< New trade, or trade details have been updated
  };
  virtual ~Gateway() = default;
  /**
   * Start the event loop.
   */
  virtual void start() = 0;
  // TODO(thraneh): client connect & disconnet
  /**
   * CreateOrder request.
   *
   * @param create_order_request has the order creation request details.
   */
  virtual void on(const CreateOrderRequest& create_order_request) = 0;
  /**
   * ModifyOrder request.
   *
   * @param modify_order_request has the order modification request details.
   */
  virtual void on(const ModifyOrderRequest& modify_order_request) = 0;
  /**
   * CancelOrder request.
   *
   * @param cancel_order_request has the order cancellation request details.
   */
  virtual void on(const CancelOrderRequest& cancel_order_request) = 0;
};

/**
 * Client interface.
 */

class Client {
 public:
  virtual void on(const HandshakeAckEvent&) = 0;           ///< Handshake ack event handler.
  virtual void on(const HeartbeatAckEvent&) = 0;           ///< Heartbeat ack event handler.
};

/**
 * Strategy interface.
 */
class Strategy {
 public:
   /*
    * Dispatcher interface.
    */
  class Dispatcher {
   public:
    /**
     * Send CreateOrder request.
     *
     * @param create_order_request has the order creation request details.
     */
    virtual void send(const CreateOrderRequest& create_order_request) = 0;
    /**
     * Send ModifyOrder request.
     *
     * @param modify_order_request has the order modification request details.
     */
    virtual void send(const ModifyOrderRequest& modify_order_request) = 0;
    /**
     * Send CancelOrder request.
     *
     * @param cancel_order_request has the order cancellation request details.
     */
    virtual void send(const CancelOrderRequest& cancel_order_request) = 0;
  };
  virtual ~Strategy() = default;
  virtual void on(const TimerEvent&) = 0;                  ///< Timer (don't rely on the accuracy!)
  virtual void on(const IdleEvent&) = 0;                   ///< Idle
  virtual void on(const GatewayStatusEvent&) = 0;          ///< Connection or login status has changed for a gateway
  virtual void on(const ReferenceDataEvent&) = 0;          ///< Reference data update for an instrument
  virtual void on(const MarketStatusEvent&) = 0;           ///< Market status update for an instrument
  virtual void on(const MarketByPriceEvent&) = 0;          ///< Market-by-price update for an instrument
  virtual void on(const SessionStatisticsEvent&) = 0;      ///< Session statistics update for an instrument
  virtual void on(const DailyStatisticsEvent&) = 0;        ///< Daily statistics update for an instrument
  virtual void on(const CreateOrderAckEvent&) = 0;         ///< Response to a create order request
  virtual void on(const ModifyOrderAckEvent&) = 0;         ///< Response to a modify order request
  virtual void on(const CancelOrderAckEvent&) = 0;         ///< Response to a cancel order request
  virtual void on(const OrderUpdateEvent&) = 0;            ///< New order, or order details have been updated
  virtual void on(const TradeUpdateEvent&) = 0;            ///< New trade, or trade details have been updated
};

}  // namespace common
}  // namespace quinclas

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::ConnectionStatus value) {
  return stream << quinclas::common::EnumNameConnectionStatus(value);
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::LoginStatus value) {
  return stream << quinclas::common::EnumNameLoginStatus(value);
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::TradeDirection value) {
  return stream << quinclas::common::EnumNameTradeDirection(value);
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::TradingStatus value) {
  return stream << quinclas::common::EnumNameTradingStatus(value);
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::OrderStatus value) {
  return stream << quinclas::common::EnumNameOrderStatus(value);
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::Layer& value) {
  return stream << "{"
    "bid_price=" << value.bid_price << ", " <<
    "bid_quantity=" << value.bid_quantity << ", " <<
    "ask_price=" << value.ask_price << ", " <<
    "ask_quantity=" << value.ask_quantity <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::GatewayStatus& value) {
  return stream << "{"
    "market_data_connection_status=" << value.market_data_connection_status << ", "
    "market_data_login_status=" << value.market_data_login_status << ", "
    "order_management_connection_status=" << value.order_management_connection_status << ", "
    "order_management_login_status=" << value.order_management_login_status <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::ReferenceData& value) {
  return stream << "{"
    "exchange=\"" << value.exchange << "\", " <<
    "instrument=\"" << value.exchange << "\", " <<
    "tick_size=" << value.tick_size << ", "
    "tick_size=" << value.tick_size << ", "
    "limit_up=" << value.limit_up << ", "
    "limit_down=" << value.limit_down <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::MarketStatus& value) {
  return stream << "{"
    "exchange=\"" << value.exchange << "\", " <<
    "instrument=\"" << value.exchange << "\", " <<
    "trading_status=" << value.trading_status <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::MarketByPrice& value) {
  stream << "{"
    "exchange=\"" << value.exchange << "\", " <<
    "instrument=\"" << value.instrument << "\", " <<
    "layers=[";
  const size_t length = sizeof(value.depth) / sizeof(value.depth[0]);
  for (size_t index = 0; index < length; ++index) {
    if (index > 0)
      stream << ", ";
    stream << value.depth[index];
  }
  return stream << "]";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::SessionStatistics& value) {
  return stream << "{"
    "open=" << value.open << ", " <<
    "high=" << value.high << ", " <<
    "low=" << value.low <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::DailyStatistics& value) {
  return stream << "{"
    "settlement=" << value.settlement << ", " <<
    "open_interest=" << value.open_interest << ", " <<
    "volume=" << value.volume <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::OrderUpdate& value) {
  return stream << "{"
    "opaque=" << value.opaque << ", " <<
    "order_id=" << value.order_id << ", " <<
    "order_template=\"" << value.order_template << "\", " <<
    "external_order_id=\"" << value.external_order_id << "\", " <<
    "exchange=\"" << value.exchange << "\", " <<
    "instrument=\"" << value.instrument << "\", " <<
    "status=" << value.status << ", "
    "trade_direction=" << value.trade_direction << ", "
    "remaining_quantity=" << value.remaining_quantity << ", "
    "traded_quantity=" << value.traded_quantity << ", "
    "insert_time=" << cctz::format("%E4Y-%m-%dT%H:%M:%E6S", value.insert_time, cctz::utc_time_zone()) << ", " <<
    "cancel_time=" << cctz::format("%E4Y-%m-%dT%H:%M:%E6S", value.cancel_time, cctz::utc_time_zone()) <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::TradeUpdate& value) {
  return stream << "{"
    "order_id=" << value.order_id << ", " <<
    "external_order_id=\"" << value.external_order_id << "\", " <<
    "external_trade_id=\"" << value.external_trade_id << "\", " <<
    "exchange=\"" << value.exchange << "\", " <<
    "instrument=\"" << value.instrument << "\", " <<
    "trade_direction=" << value.trade_direction << ", "
    "quantity=" << value.quantity << ", "
    "price=" << value.price << ", "
    "trade_time=" << cctz::format("%E4Y-%m-%dT%H:%M:%E6S", value.trade_time, cctz::utc_time_zone()) <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::CreateOrderAck& value) {
  return stream << "{"
    "opaque=" << value.opaque << ", " <<
    "order_id=" << value.order_id << ", " <<
    "failure=" << (value.failure ? "true" : "false") << ", " <<
    "reason=\"" << value.reason << "\", " <<
    "order_template=\"" << value.order_template << "\", " <<
    "external_order_id=\"" << value.external_order_id << "\", " <<
    "exchange=\"" << value.exchange << "\", " <<
    "instrument=\"" << value.instrument << "\"" <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::ModifyOrderAck& value) {
  return stream << "{"
    "opaque=" << value.opaque << ", " <<
    "order_id=" << value.order_id << ", " <<
    "failure=" << (value.failure ? "true" : "false") << ", " <<
    "reason=\"" << value.reason << "\", " <<
    "order_template=\"" << value.order_template << "\", " <<
    "external_order_id=\"" << value.external_order_id << "\", " <<
    "exchange=\"" << value.exchange << "\", " <<
    "instrument=\"" << value.instrument << "\", " <<
    "quantity_change=" << value.quantity_change << ", " <<
    "limit_price=" << value.limit_price <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::CancelOrderAck& value) {
  return stream << "{"
    "opaque=" << value.opaque << ", " <<
    "order_id=" << value.order_id << ", " <<
    "failure=" << (value.failure ? "true" : "false") << ", " <<
    "reason=\"" << value.reason << "\", " <<
    "order_template=\"" << value.order_template << "\", " <<
    "external_order_id=\"" << value.external_order_id << "\", " <<
    "exchange=\"" << value.exchange << "\", " <<
    "instrument=\"" << value.instrument << "\"" <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::MessageInfo& value) {
  return stream << "{"
    "gateway=\"" << value.gateway << "\", " <<
    "message_id=" << value.message_id << ", " <<
    "exchange_time=" << cctz::format("%E4Y-%m-%dT%H:%M:%E6S", value.exchange_time, cctz::utc_time_zone()) << ", " <<
    "receive_time=" << cctz::format("%E4Y-%m-%dT%H:%M:%E6S", value.receive_time, cctz::utc_time_zone()) << ", " <<
    "enqueue_time=" << cctz::format("%E4Y-%m-%dT%H:%M:%E6S", value.enqueue_time, cctz::utc_time_zone()) << ", " <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::GatewayStatusEvent& value) {
  return stream << "{"
    "message_info=" << value.message_info << ", "
    "gateway_status=" << value.gateway_status <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::ReferenceDataEvent& value) {
  return stream << "{"
    "message_info=" << value.message_info << ", "
    "reference_data=" << value.reference_data <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::MarketStatusEvent& value) {
  return stream << "{"
    "message_info=" << value.message_info << ", "
    "market_status=" << value.market_status <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::MarketByPriceEvent& value) {
  return stream << "{"
    "message_info=" << value.message_info << ", "
    "market_by_price=" << value.market_by_price <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::SessionStatisticsEvent& value) {
  return stream << "{"
    "message_info=" << value.message_info << ", "
    "session_statistics=" << value.session_statistics <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::DailyStatisticsEvent& value) {
  return stream << "{"
    "message_info=" << value.message_info << ", "
    "daily_statistics=" << value.daily_statistics <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::OrderUpdateEvent& value) {
  return stream << "{"
    "message_info=" << value.message_info << ", "
    "order_update=" << value.order_update <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::TradeUpdateEvent& value) {
  return stream << "{"
    "message_info=" << value.message_info << ", "
    "trade_update=" << value.trade_update <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::CreateOrderAckEvent& value) {
  return stream << "{"
    "message_info=" << value.message_info << ", "
    "create_order_ack=" << value.create_order_ack <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::ModifyOrderAckEvent& value) {
  return stream << "{"
    "message_info=" << value.message_info << ", "
    "modify_order_ack=" << value.modify_order_ack <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::CancelOrderAckEvent& value) {
  return stream << "{"
    "message_info=" << value.message_info << ", "
    "cancel_order_ack=" << value.cancel_order_ack <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::CreateOrder& value) {
  return stream << "{"
    "opaque=" << value.opaque << ", "
    "order_template=" << value.order_template << ", "
    "exchange=\"" << value.exchange << "\", " <<
    "instrument=\"" << value.instrument << "\", " <<
    "direction=" << value.direction << ", "
    "quantity=" << value.quantity << ", "
    "limit_price=" << value.limit_price << ", "
    "stop_price=" << value.stop_price <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::ModifyOrder& value) {
  return stream << "{"
    "order_id=" << value.order_id <<
    "quantity_change=" << value.quantity_change << ", "
    "limit_price=" << value.limit_price <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::CancelOrder& value) {
  return stream << "{"
    "order_id=" << value.order_id <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::RequestInfo& value) {
  return stream << "{"
    "destination=\"" << value.destination <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::CreateOrderRequest& value) {
  return stream << "{"
    "request_info=" << value.request_info << ", "
    "create_order=" << value.create_order <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::ModifyOrderRequest& value) {
  return stream << "{"
    "request_info=" << value.request_info << ", "
    "modify_order=" << value.modify_order <<
    "}";
}

inline std::ostream& operator<<(std::ostream& stream, const quinclas::common::CancelOrderRequest& value) {
  return stream << "{"
    "request_info=" << value.request_info << ", "
    "cancel_order=" << value.cancel_order <<
    "}";
}
