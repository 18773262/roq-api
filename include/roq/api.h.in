/* Copyright (c) 2017-2018, Hans Erik Thrane */

#pragma once

#include <roq/api_generated.h>

#include <chrono>
#include <map>
#include <string>
#include <utility>
#include <vector>

/**
 * API version.
 */
#define ROQ_VERSION "@PACKAGE_VERSION@"

namespace roq {

/**
 * Constants.
 */
const size_t MAX_DEPTH = 5;  ///< Maximum market-by-price depth

/**
 * Time.
 */
typedef std::chrono::system_clock::duration duration_t;
typedef std::chrono::system_clock::time_point time_point_t;

/**
 * Messaging. (INTERNAL)
 */
typedef std::pair<const void *, size_t> message_t;

/**
 * BatchInfo. (INTERNAL)
 * Used by the communication layer to frame a set of events.
 */
struct BatchInfo {
  uint64_t seqno;          ///< Sequence number specific to the client's connection.
  time_point_t send_time;  ///< Time when the batch was sent.
  bool from_cache;         ///< True if the batch originates from the cache.
};

/**
 * SourceInfo. (INTERNAL)
 * Information useful for correlating update events.
 */
struct SourceInfo {
  uint64_t seqno;            ///< Sequence number created by the source.
  time_point_t create_time;  ///< Time at which the source received or created the event.
};

/**
 * MessageInfo.
 * Information allowing the client to identify the origin and age of
 * the information associated with an update event.
 */
struct MessageInfo {
  const char *source;                ///< Client's own name for the source.
  time_point_t source_create_time;   ///< Source's create time (perhaps a receive time).
  time_point_t client_receive_time;  ///< Client's receive time.
  duration_t routing_latency;        ///< Routing latency (from source to client).
  bool from_cache;                   ///< True if the message originates from the cache.
  bool is_last;                      ///< Is this update event the last of the batch?
  // FIXME(thraneh): experimental
  uint16_t channel;
};

/**
 * Handshake. (INTERNAL)
 * Sent by the client immediately following successful connection.
 */
struct Handshake {
  const char *api_version;  ///< ROQ_VERSION
  const char *application;  ///< Application descriptive name.
  const char *hostname;     ///< Descriptive hostname.
  uint32_t pid;             ///< Process identifier.
  const char *uuid;         ///< GUID uniquely identifying the client process.
  const char *login;        ///< Login name.
  const char *password;     ///< Login password.
  // FIXME(thraneh): experimental
  std::vector<std::string> subscriptions;
};

/**
 * Handshake ack. (INTERNAL)
 * Sent by the server as response to the Handshake message.
 * The server will disconnect the client, immediately following
 * the HandshakeAck message, if the login details do not meet
 * implementation-specific conditions.
 * The client is allowed to send heartbeat messages if the
 * handshake returns successfully.
 * The server may send cached events followed by the ready
 * message.
 * The client is only allowed to send requests after the
 * ready message has been received.
 */
struct HandshakeAck {
  const char *api_version;      ///< ROQ_VERSION
  const char *application;      ///< Application descriptive name.
  const char *hostname;         ///< Descriptive hostname.
  uint32_t pid;                 ///< Process identifier.
  bool failure;                 ///< Handshake failure?
  const char *failure_reason;   ///< Reason for the failure.
  const char *server_uuid;      ///< GUID uniquely identifying the source process.
  const char *server_name;      ///< Name representing the source.
  // FIXME(thraneh): experimental
  const char *shmem_s2c_name;
  uint32_t shmem_s2c_size;
  const char *shmem_c2s_name;
  uint32_t shmem_c2s_size;
};

/**
 * Heartbeat. (INTERNAL)
 * Sent by the client as a keep-alive message.
 * The server may disconnect the client if it has not received
 * a heartbat message within a pre-configured grace period.
 * Heartbeat messages are only allowed after the handshake
 * sequence has completed successfully.
 */
struct Heartbeat {
  int64_t opaque;  ///< Opaque value.
};

/**
 * Heartbeat ack. (INTERNAL)
 * Sent by the server as a response to a Heartbeat message.
 * The opaque (time-point) value is returned to the client
 * allowing it to monitor communication round-trip latency.
 */
struct HeartbeatAck {
  int64_t opaque;  ///< Opaque value (returned).
};

/**
 * DownloadBegin.
 * Server sends this event when initiates a download.
 * Client is not allowed to send any requests until it has
 * received the DownloadEnd event.
 */
struct DownloadBegin {
};

/**
 * DownloadEnd.
 * Servers sends this event when it has completed a download.
 * Client is again allowed to send requests.
 */
struct DownloadEnd {
  uint32_t max_order_id;  ///< Maximum order id.
};


// ---------------


/**
 * Gateway status.
 */
struct GatewayStatus {
  const char *name;     ///< Name of the channel, e.g. MDUser or Trader
  GatewayState status;  ///< Status of the channel.
};

/**
 * Layer.
 * A positional layer of an order book.
 * The layer represents an aggregated by-price view of all
 * resting orders.
 */
struct Layer {
  double bid_price;     // Bid price.
  double bid_quantity;  // Bid quantity.
  double ask_price;     // Ask price.
  double ask_quantity;  // Ask quantity.
};

/**
 * Market depth (aggregated view of an order book).
 */
struct MarketByPrice {
  const char *exchange;        ///< Exchange name
  const char *instrument;      ///< Instrument name
  Layer depth[MAX_DEPTH];      ///< Layers
  time_point_t exchange_time;  ///< Exchange time-stamp
  // FIXME(thraneh): experimental
  uint16_t channel;
};

/**
 * Trade summary.
 */
struct TradeSummary {
  const char *exchange;        ///< Exchange name
  const char *instrument;      ///< Instrument name
  double price;                ///< Price
  double volume;               ///< Volume
  double turnover;             ///< Turnover
  TradeDirection direction;    ///< Direction
  time_point_t exchange_time;  ///< Exchange time-stamp
  // FIXME(thraneh): experimental
  uint16_t channel;
};

/**
 * Reference data.
 */
struct ReferenceData {
  const char *exchange;    ///< Exchange name
  const char *instrument;  ///< Instrument name
  double tick_size;        ///< Tick size (price increments)
  double limit_up;         ///< Price limit-up
  double limit_down;       ///< Price limit-down
};

/**
 * Market status.
 */
struct MarketStatus {
  const char *exchange;          ///< Exchange name
  const char *instrument;        ///< Instrument name
  TradingStatus trading_status;  ///< Market status
};

/**
 * Create order.
 */
struct CreateOrder {
  uint32_t order_id;           ///< User's order identifier.
  const char *order_template;  ///< Order template name.
  const char *exchange;        ///< Exchange name.
  const char *instrument;      ///< Instrument name.
  TradeDirection direction;    ///< Trade direction.
  double quantity;             ///< Quantity.
  double limit_price;          ///< Limit price.
  double stop_price;           ///< Optional stop price.
};

/**
 * Response to create order
 */
struct CreateOrderAck {
  uint32_t order_id;              ///< User's order identifier.
  bool failure;                   ///< Failure?
  const char *reason;             ///< Reason (if failure).
  const char *exchange;           ///< Exchange name.
  const char *instrument;         ///< Instrument name.
  // ... for debugging
  uint32_t order_local_id;        ///< Gateway order identifier.
  const char *order_external_id;  ///< External order identifier.
};

/**
 * Modify order.
 */
struct ModifyOrder {
  uint32_t order_id;       ///< User's order identifier.
  double quantity_change;  ///< Desired quantity change
  double limit_price;      ///< Limit price
};

/**
 * Response to modify order
 */
struct ModifyOrderAck {
  uint32_t order_id;              ///< User's order identifier.
  bool failure;                   ///< Failure?
  const char *reason;             ///< Reason (if failure).
  const char *exchange;           ///< Exchange name.
  const char *instrument;         ///< Instrument name.
  // ... for debugging
  uint32_t order_local_id;        ///< Gateway order identifier.
  const char *order_external_id;  ///< External order identifier.
};

/**
 * Cancel order.
 */
struct CancelOrder {
  uint32_t order_id;  ///< User provided order identifier.
};

/**
 * Response to cancel order
 */
struct CancelOrderAck {
  uint32_t order_id;              ///< User's order identifier.
  bool failure;                   ///< Failure?
  const char *reason;             ///< Reason (if failure).
  const char *exchange;           ///< Exchange name.
  const char *instrument;         ///< Instrument name.
  // ... for debugging
  uint32_t order_local_id;        ///< Gateway order identifier.
  const char *order_external_id;  ///< External order identifier.
};

/**
 * Order update.
 */
struct OrderUpdate {
  uint32_t order_id;               ///< User's order identifier.
  const char *order_template;      ///< Order template
  const char *exchange;            ///< Exchange name
  const char *instrument;          ///< Instrument name
  OrderStatus order_status;        ///< Order status
  TradeDirection trade_direction;  ///< Trade direction
  double remaining_quantity;       ///< Remaining (unfilled) quantity
  double traded_quantity;          ///< Traded (filled) quantity
  time_point_t insert_time;        ///< Order insertion time
  time_point_t cancel_time;        ///< Order cancellation time
  uint32_t order_local_id;         ///< Gateway order identifier.
  const char *order_external_id;   ///< External order identifier.
};

/**
 * Trade update.
 */
struct TradeUpdate {
  uint32_t trade_id;               ///< Trade identifier.
  uint32_t order_id;               ///< User's order identifier.
  const char *order_template;      ///< Order template
  const char *exchange;            ///< Exchange name
  const char *instrument;          ///< Instrument name
  TradeDirection trade_direction;  ///< Trade direction
  double quantity;                 ///< Trade quantity
  double price;                    ///< Trade price
  time_point_t trade_time;         ///< Trade time
  uint32_t order_local_id;         ///< Gateway order identifier.
  const char *order_external_id;   ///< External order identifier.
  const char *trade_external_id;   ///< External trade identifier
};

/**
 * Position update.
 */
struct PositionUpdate {
  const char *exchange;            ///< Exchange name
  const char *instrument;          ///< Instrument name
  TradeDirection trade_direction;  ///< Trade direction
  double position;                 ///< Position.
  // FIXME(thraneh): experimental
  double position_yesterday;
  double frozen_position;
  double frozen_closing;
  double frozen_closing_yesterday;
};


// ---------------


/**
 * Timer event. (INTERNAL)
 */
struct TimerEvent {};

/**
 * Connection event. (INTERNAL)
 */
struct ConnectionStatusEvent {
  const char *source;
  ConnectionStatus connection_status;
};


// ---------------


/**
 * Batch begin event.
 */
struct BatchBeginEvent {
  const MessageInfo& message_info;
};

/**
 * Batch end event.
 */
struct BatchEndEvent {
  const MessageInfo& message_info;
};


// ---------------


/*
 * Handshake request. (INTERNAL)
 */
struct HandshakeEvent {
  const MessageInfo& message_info;
  const Handshake& handshake;
};

/**
 * Handshake ack event. (INTERNAL)
 */
struct HandshakeAckEvent {
  const MessageInfo& message_info;
  const HandshakeAck& handshake_ack;
};

/*
 * Heartbeat request. (INTERNAL)
 */
struct HeartbeatEvent {
  const MessageInfo& message_info;
  const Heartbeat& heartbeat;
};

/**
 * Heartbeat ack event. (INTERNAL)
 */
struct HeartbeatAckEvent {
  const MessageInfo& message_info;
  const HeartbeatAck& heartbeat_ack;
};

/**
 * DownloadBegin event.
 */
struct DownloadBeginEvent {
  const MessageInfo& message_info;
  const DownloadBegin& download_begin;
};

/**
 * DownloadEnd event.
 */
struct DownloadEndEvent {
  const MessageInfo& message_info;
  const DownloadEnd& download_end;
};

/**
 * Gateway status update event.
 */
struct GatewayStatusEvent {
  const MessageInfo& message_info;
  const GatewayStatus& gateway_status;
};

/**
 * Reference data update event.
 */
struct ReferenceDataEvent {
  const MessageInfo& message_info;
  const ReferenceData& reference_data;
};

/**
 * Market status update event.
 */
struct MarketStatusEvent {
  const MessageInfo& message_info;
  const MarketStatus& market_status;
};

/**
 * Market depth update event.
 */
struct MarketByPriceEvent {
  const MessageInfo& message_info;
  const MarketByPrice& market_by_price;
};

/**
 * Trade summary update event.
 */
struct TradeSummaryEvent {
  const MessageInfo& message_info;
  const TradeSummary& trade_summary;
};

/*
 * Create order request. (INTERNAL)
 */
struct CreateOrderEvent {
  const MessageInfo& message_info;
  const CreateOrder& create_order;
};

/**
 * Create order ack event.
 */
struct CreateOrderAckEvent {
  const MessageInfo& message_info;
  const CreateOrderAck& create_order_ack;
};

/*
 * Modify order request. (INTERNAL)
 */
struct ModifyOrderEvent {
  const MessageInfo& message_info;
  const ModifyOrder& modify_order;
};

/**
 * Modify order ack event.
 */
struct ModifyOrderAckEvent {
  const MessageInfo& message_info;
  const ModifyOrderAck& modify_order_ack;
};

/*
 * Cancel order request. (INTERNAL)
 */
struct CancelOrderEvent {
  const MessageInfo& message_info;
  const CancelOrder& cancel_order;
};

/**
 * Cancel order ack event.
 */
struct CancelOrderAckEvent {
  const MessageInfo& message_info;
  const CancelOrderAck& cancel_order_ack;
};

/**
 * Order update event.
 */
struct OrderUpdateEvent {
  const MessageInfo& message_info;
  const OrderUpdate& order_update;
};

/**
 * Trade update event.
 */
struct TradeUpdateEvent {
  const MessageInfo& message_info;
  const TradeUpdate& trade_update;
};

/**
 * Position update event.
 */
struct PositionUpdateEvent {
  const MessageInfo& message_info;
  const PositionUpdate& position_update;
};

/**
 * Strategy interface.
 */
class Strategy {
 public:
   /*
    * Dispatcher interface.
    */
  class Dispatcher {
   public:
    /**
     * Send CreateOrder request.
     *
     * @param create_order has the order creation details.
     * @param gateway name of the destination gateway.
     */
    virtual void send(const CreateOrder& create_order, const std::string& gateway) = 0;
    /**
     * Send ModifyOrder request.
     *
     * @param modify_order has the order modification details.
     * @param gateway name of the destination gateway.
     */
    virtual void send(const ModifyOrder& modify_order, const std::string& gateway) = 0;
    /**
     * Send CancelOrder request.
     *
     * @param cancel_order has the order cancellation details.
     * @param gateway name of the destination gateway.
     */
    virtual void send(const CancelOrder& cancel_order, const std::string& gateway) = 0;
  };
  virtual ~Strategy() = default;
  typedef std::vector<std::string> instruments_t;
  typedef std::map<std::string, instruments_t> exchanges_t;
  typedef std::map<std::string, exchanges_t> subscriptions_t;
  virtual const subscriptions_t& get_subscriptions() const = 0;
  virtual void on(const TimerEvent&) = 0;             ///< Timer (internal notification, do *not* rely on accuracy!)
  virtual void on(const ConnectionStatusEvent&) = 0;  ///< The connection status has changed (internal notification)
  virtual void on(const BatchBeginEvent&) = 0;        ///< Batch begin
  virtual void on(const BatchEndEvent&) = 0;          ///< Batch end
  virtual void on(const DownloadBeginEvent&) = 0;     ///< Download begin
  virtual void on(const DownloadEndEvent&) = 0;       ///< Download end
  virtual void on(const GatewayStatusEvent&) = 0;     ///< The gateway's connection or login status has changed
  virtual void on(const ReferenceDataEvent&) = 0;     ///< Reference data update for an instrument
  virtual void on(const MarketStatusEvent&) = 0;      ///< Market status update for an instrument
  virtual void on(const MarketByPriceEvent&) = 0;     ///< Market-by-price update for an instrument
  virtual void on(const TradeSummaryEvent&) = 0;      ///< Trade summary update for an instrument
  virtual void on(const CreateOrderAckEvent&) = 0;    ///< Response to a create order request
  virtual void on(const ModifyOrderAckEvent&) = 0;    ///< Response to a modify order request
  virtual void on(const CancelOrderAckEvent&) = 0;    ///< Response to a cancel order request
  virtual void on(const OrderUpdateEvent&) = 0;       ///< New order, or order details have been updated
  virtual void on(const TradeUpdateEvent&) = 0;       ///< New trade, or trade details have been updated
  virtual void on(const PositionUpdateEvent&) = 0;    ///< Position update
};

/**
 * Exception.
 */
class Exception : public std::exception {};

/**
 * NotConnected.
 */
class NotConnected final : public Exception {
 public:
  const char *what() const noexcept override {
    return "Not connected.";
  }
};

/**
 * NotReady.
 */
class NotReady final : public Exception {
 public:
  const char *what() const noexcept override {
    return "Not ready.";
  }
};

}  // namespace roq
