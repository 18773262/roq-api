include "enums.fbs";

namespace roq.schema;

table SourceInfo {
  seqno:ulong;
  create_time:ulong;
}

table Handshake {
  api_version:string;
  application:string;
  hostname:string;
  pid:uint;
  uuid:string;
  login:string;
  password:string;
  subscriptions:[string];
}

table HandshakeAck {
  api_version:string;
  application:string;
  hostname:string;
  pid:uint;
  failure:bool;
  failure_reason:string;
  server_uuid:string;
  server_name:string;
  shmem_s2c_name:string;
  shmem_s2c_size:uint;
  shmem_c2s_name:string;
  shmem_c2s_size:uint;
}

table Heartbeat {
  opaque:long;
}

table HeartbeatAck {
  opaque:long;
}

table Ready {
}

table GatewayStatus {
  name:string;
  status:common.GatewayState;
}

struct Layer {
  bid_price:double;
  bid_quantity:double;
  ask_price:double;
  ask_quantity:double;
}

table MarketByPrice {
  exchange:string;
  instrument:string;
  depth:[Layer];
  exchange_time:ulong;
  channel:uint;
}

table TradeSummary {
  exchange:string;
  instrument:string;
  price:double;
  volume:double;
  turnover:double;
  direction:common.TradeDirection;
  exchange_time:ulong;
  channel:uint;
}

table ReferenceData {
  exchange:string;
  instrument:string;
  tick_size:double;
  limit_up:double;
  limit_down:double;
}

table MarketStatus {
  exchange:string;
  instrument:string;
  trading_status:common.TradingStatus;
}

table CreateOrder {
  opaque:uint;
  order_template:string;
  exchange:string;
  instrument:string;
  direction:common.TradeDirection;
  quantity:double;
  limit_price:double;
  stop_price:double;
}

table CreateOrderAck {
  opaque:uint;
  order_id:uint;
  failure:bool;
  reason:string;
  order_template:string;
  external_order_id:string;
  exchange:string;
  instrument:string;
}

table ModifyOrder {
  order_id:uint;
  quantity_change:double;
  limit_price:double;
}

table ModifyOrderAck {
  opaque:uint;
  order_id:uint;
  failure:bool;
  reason:string;
  order_template:string;
  external_order_id:string;
  exchange:string;
  instrument:string;
  quantity_change:double;
  limit_price:double;
}

table CancelOrder {
  order_id:uint;
}

table CancelOrderAck {
  opaque:uint;
  order_id:uint;
  failure:bool;
  reason:string;
  order_template:string;
  external_order_id:string;
  exchange:string;
  instrument:string;
}

table OrderUpdate {
  opaque:uint;
  order_id:uint;
  order_template:string;
  external_order_id:string;
  exchange:string;
  instrument:string;
  status:common.OrderStatus;
  trade_direction:common.TradeDirection;
  remaining_quantity:double;
  traded_quantity:double;
  insert_time:ulong;
  cancel_time:ulong;
}

table TradeUpdate {
  order_id:uint;
  external_order_id:string;
  external_trade_id:string;
  exchange:string;
  instrument:string;
  trade_direction:common.TradeDirection;
  quantity:double;
  price:double;
  trade_time:ulong;
}

table PositionUpdate {
  exchange:string;
  instrument:string;
  trade_direction:common.TradeDirection;
  position:double;
  position_yesterday:double;
  frozen_position:double;
  frozen_closing:double;
  frozen_closing_yesterday:double;
}

union EventData {
  Handshake,
  HandshakeAck,
  Heartbeat,
  HeartbeatAck,
  Ready,
  GatewayStatus,
  ReferenceData,
  MarketStatus,
  MarketByPrice,
  TradeSummary,
  CreateOrder,
  CreateOrderAck,
  ModifyOrder,
  ModifyOrderAck,
  CancelOrder,
  CancelOrderAck,
  OrderUpdate,
  TradeUpdate,
  PositionUpdate,
}

table Event {
  source_info:SourceInfo;
  event_data:EventData;
}
